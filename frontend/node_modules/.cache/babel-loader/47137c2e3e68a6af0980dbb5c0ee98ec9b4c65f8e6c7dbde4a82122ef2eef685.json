{"ast":null,"code":"var _jsxFileName = \"C:\\\\Health-First\\\\frontend\\\\src\\\\components\\\\Chatboat.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { GoogleGenerativeAI } from \"@google/generative-ai\";\nimport { Chat } from \"./Chat/Chat\";\nimport { Controls } from \"./Controls/Controls\";\nimport styles from \"./Chat/Chat.module.css\";\nimport { Loader } from \"./Loader/Loader\";\n\n// ✅ Load API key securely\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_KEY = 'AIzaSyBZaqKBTZTUds0ptmklR41mjS36PRIDIAU';\nconst googleai = new GoogleGenerativeAI(API_KEY);\nconst gemini = googleai.getGenerativeModel({\n  model: \"gemini-2.0-flash\"\n});\nconst Chatboat = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [chat, setChat] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Initialize chat on component mount\n  useEffect(() => {\n    async function initChat() {\n      try {\n        const newChat = gemini.startChat({\n          history: []\n        });\n        setChat(newChat);\n      } catch (error) {\n        console.error(\"Error initializing chat:\", error);\n      }\n    }\n    initChat();\n  }, []);\n  function addMessage(message) {\n    setMessages(prevMessages => [...prevMessages, message]);\n  }\n  async function handleContentSend(content) {\n    addMessage({\n      content,\n      role: \"user\"\n    });\n    setIsLoading(true);\n    if (!chat) {\n      addMessage({\n        content: \"Chat service unavailable. Please try again later.\",\n        role: \"system\"\n      });\n      setIsLoading(false);\n      return;\n    }\n    try {\n      const result = await chat.sendMessage(content);\n      console.log(\"API Response:\", result); // Debugging\n\n      // ✅ Extract text properly\n      const responseText = result.response.text();\n      addMessage({\n        content: responseText,\n        role: \"assistant\"\n      });\n    } catch (error) {\n      console.error(\"Error sending message:\", error);\n      addMessage({\n        content: \"Sorry, I couldn't process your request. Please try again!\",\n        role: \"system\"\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.App,\n    children: [isLoading && /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(\"header\", {\n      className: styles.Header,\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: styles.Title,\n        children: \"AI Chatbot For Online Heat(Powered by Gemini AI)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.ChatContainer,\n      children: /*#__PURE__*/_jsxDEV(Chat, {\n        messages: messages\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Controls, {\n      isDisabled: isLoading,\n      onSend: handleContentSend\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatboat, \"RbNesf0kXGNJPiOJ5oKuxkHxmns=\");\n_c = Chatboat;\nexport default Chatboat;\nvar _c;\n$RefreshReg$(_c, \"Chatboat\");","map":{"version":3,"names":["useState","useEffect","GoogleGenerativeAI","Chat","Controls","styles","Loader","jsxDEV","_jsxDEV","API_KEY","googleai","gemini","getGenerativeModel","model","Chatboat","_s","messages","setMessages","chat","setChat","isLoading","setIsLoading","initChat","newChat","startChat","history","error","console","addMessage","message","prevMessages","handleContentSend","content","role","result","sendMessage","log","responseText","response","text","className","App","children","fileName","_jsxFileName","lineNumber","columnNumber","Header","Title","ChatContainer","isDisabled","onSend","_c","$RefreshReg$"],"sources":["C:/Health-First/frontend/src/components/Chatboat.jsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport { GoogleGenerativeAI } from \"@google/generative-ai\";\nimport { Chat } from \"./Chat/Chat\";\nimport { Controls } from \"./Controls/Controls\";\nimport styles from \"./Chat/Chat.module.css\";\nimport { Loader } from \"./Loader/Loader\";\n\n// ✅ Load API key securely\nconst API_KEY = 'AIzaSyBZaqKBTZTUds0ptmklR41mjS36PRIDIAU'; \nconst googleai = new GoogleGenerativeAI(API_KEY);\nconst gemini = googleai.getGenerativeModel({ model: \"gemini-2.0-flash\" });\n\nconst Chatboat = () => {\n  const [messages, setMessages] = useState([]);\n  const [chat, setChat] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Initialize chat on component mount\n  useEffect(() => {\n    async function initChat() {\n      try {\n        const newChat = gemini.startChat({ history: [] });\n        setChat(newChat);\n      } catch (error) {\n        console.error(\"Error initializing chat:\", error);\n      }\n    }\n    initChat();\n  }, []);\n\n  function addMessage(message) {\n    setMessages((prevMessages) => [...prevMessages, message]);\n  }\n\n  async function handleContentSend(content) {\n    addMessage({ content, role: \"user\" });\n    setIsLoading(true);\n\n    if (!chat) {\n      addMessage({\n        content: \"Chat service unavailable. Please try again later.\",\n        role: \"system\",\n      });\n      setIsLoading(false);\n      return;\n    }\n\n    try {\n      const result = await chat.sendMessage(content);\n\n      console.log(\"API Response:\", result); // Debugging\n\n      // ✅ Extract text properly\n      const responseText = result.response.text();\n\n      addMessage({ content: responseText, role: \"assistant\" });\n    } catch (error) {\n      console.error(\"Error sending message:\", error);\n      addMessage({\n        content: \"Sorry, I couldn't process your request. Please try again!\",\n        role: \"system\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  return (\n    <div className={styles.App}>\n      {isLoading && <Loader />}\n      <header className={styles.Header}>\n        <h2 className={styles.Title}>AI Chatbot For Online Heat(Powered by Gemini AI)</h2>\n      </header>\n      <div className={styles.ChatContainer}>\n        <Chat messages={messages} />\n      </div>\n      <Controls isDisabled={isLoading} onSend={handleContentSend} />\n    </div>\n  );\n};\n\nexport default Chatboat;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}